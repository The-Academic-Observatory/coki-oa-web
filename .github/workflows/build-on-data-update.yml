name: Build and Deploy on Data Update

on:
  repository_dispatch:
    types:
      - data-update/develop
      - data-update/staging
      - data-update/production

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set environment develop
        if: github.event.action == 'data-update/develop'
        run: |
          echo "ENVIRONMENT=develop" >> $GITHUB_ENV
          echo "REPO_DISPATCH_REF=develop" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_HOST=https://develop.open.coki.ac" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_API_HOST=https://develop.open.coki.ac" >> $GITHUB_ENV

      - name: Set environment staging
        if: github.event.action == 'data-update/staging'
        run: |
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "REPO_DISPATCH_REF=main" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_HOST=https://staging.open.coki.ac" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_API_HOST=https://staging.open.coki.ac" >> $GITHUB_ENV

      - name: Get latest tag production
        if: github.event.action == 'data-update/production'
        uses: oprypin/find-latest-tag@v1
        with:
          repository: The-Academic-Observatory/coki-oa-web
          releases-only: true
        id: get_latest_tag

      - name: Set environment production
        if: github.event.action == 'data-update/production'
        run: |
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "REPO_DISPATCH_REF=${{ steps.get_latest_tag.outputs.tag }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_HOST=https://open.coki.ac" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_API_HOST=https://open.coki.ac" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          ref: ${{ env.REPO_DISPATCH_REF }}

      - name: Current Checked Out Ref
        run: |
          git symbolic-ref -q --short HEAD || git describe --tags --exact-match

      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 16.16.0

      - name: Install Wrangler
        run: |
          npm i "@cloudflare/wrangler@1.19.11" -g

      - name: Install Dependencies
        run: |
          yarn install
          cd ./workers-api && yarn install

      - name: Auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Download and Extract Data
        env:
          DATASET_VERSION: v8
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
        run: |
          gsutil cp gs://${BUCKET_NAME}/${DATASET_VERSION}/data.zip data.zip
          ./data.sh

      - name: Build and Export Web App
        run: |
          yarn build
          yarn export

      - name: Save wrangler.toml files
        env:
          WRANGLER_CONFIG: ${{ secrets.WRANGLER_CONFIG }}
          WRANGLER_CONFIG_API: ${{ secrets.WRANGLER_CONFIG_API }}
        run: |
          echo "${WRANGLER_CONFIG}" > wrangler.toml
          echo "${WRANGLER_CONFIG_API}" > ./workers-api/wrangler.toml

      - name: Publish Cloudflare Workers API
        working-directory: ./workers-api
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          wrangler publish -e ${ENVIRONMENT}

      - name: Publish Cloudflare Workers WebApp
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          wrangler publish -e ${ENVIRONMENT}
